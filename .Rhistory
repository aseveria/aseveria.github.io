})
output$barPlot <- renderPlotly({
req(input$countyMap_click$id)
county_name <- input$countyMap_click$id
print(county_name)  # Debugging: Print the county_name to the R console
county_data <- race_per_county %>%
filter(NAME == county_name)
print(county_data)  # Debugging: Print the filtered county data
p <- ggplot(data = county_data, aes(x = race, y = total)) +
geom_bar(stat = "identity") +
theme_minimal()
plotly::ggplotly(p)
})
}
shinyApp(ui, server)
View(ui)
View(ui)
View(ui)
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
~/Desktop/temp_website/docs/
cd path
install.packages('quarto')
quarto_render()
quarto_render()
library(quarto)
quarto_render
cd /path/to/your/quarto/project
getwd()
cd/Users/aliciaseveriano/Documents/Sophmore Year/DS/aseveria.github.io
cdUsers/aliciaseveriano/Documents/Sophmore Year/DS/aseveria.github.io
cd "/Users/aliciaseveriano/Documents/Sophmore Year/DS/aseveria.github.io"
cd "/Users/aliciaseveriano/Documents/Sophmore Year/DS/aseveria.github.io"
cd /Users/aliciaseveriano/Documents/Sophmore\ Year/DS/aseveria.github.io
cd '/Users/aliciaseveriano/Documents/Sophmore Year/DS/aseveria.github.io'
cd "/Users/aliciaseveriano/Documents/Sophmore Year/DS/aseveria.github.io"
cd "/Users/aliciaseveriano/Documents/Sophmore\ Year/DS/aseveria.github.io"
quarto_render
quarto_render()
library(quarto)
quarto_render()
library(tidyverse)
library(DBI)
# Assuming you have the readr package installed
library(readr)
# Read the CSV file into a data frame
users <- read_csv("users.csv")
# Now 'users' contains the data from the CSV file
library(readr)
users <- read_csv("users.csv")
posts <- read_csv("posts.csv")
comments <- read_csv("comments.csv")
View(comments)
View(users)
View(posts)
users_posts_join <- users%>%
left_join(posts, by= "DisplayName" )
View(users_posts_join)
users_posts_join %>%
ggplot(aes(x=Reputation, y = TotalUpvotes))+
geom_point()+
theme_classic()+
users_posts_join %>%
ggplot(aes(x=Reputation, y = TotalUpvotes))+
geom_point()+
theme_classic()
users_posts_join %>%
ggplot(aes(x=Reputation, y = TotalUpvotes))+
geom_point()+
theme_classic()
users_posts_join %>%
ggplot(aes(x=Reputation, y = TotalUpvotes))+
geom_boxplot()+
theme_classic()
users_posts_join %>%
ggplot(aes(x=Reputation, y = TotalUpvotes))+
geom_col()+
theme_classic()
users_posts_join %>%
ggplot(aes(x=Reputation, y = TotalUpvotes))+
geom_point()+
theme_classic()
View(comments)
users_posts_join <- users%>%
left_join(comments, by= "DisplayName" )
users_comments_join <- users%>%
left_join(comments, by= "DisplayName" )
users_comments_join <- users%>%
left_join(comments, by= "DisplayName" )
users_comments_join <- users_comments_join %<>%
mutate(
year = year(CreationDate),
month = month(CreationDate),
day = day(CreationDate),
day_of_week = wday(CreationDate, label = TRUE),
minute = minute(CreationDate),
second = second(CreationDate)
)
users_comments_join <- users_comments_join %>%
mutate(
year = year(CreationDate),
month = month(CreationDate),
day = day(CreationDate),
day_of_week = wday(CreationDate, label = TRUE),
minute = minute(CreationDate),
second = second(CreationDate)
)
View(users_comments_join)
View(comments)
users_comments_join %>%
ggplot(aes(x=year, y = TotalComments))+
geom_point()+
theme_classic()
users_comments_join %>%
ggplot(aes(x=year, y = TotalComments))+
geom_bar()+
theme_classic()
users_comments_join %>%
ggplot(aes(x=year, y = TotalComments))+
geom_boxplot()+
theme_classic()
users_comments_join %>%
ggplot()+
geom_boxplot(year, y = TotalComments)+
theme_classic()
ggplot()+
geom_boxplot(x=year, y = TotalComments)+
theme_classic()
users_comments_join %>%
ggplot()+
geom_boxplot(x=year, y = TotalComments)+
theme_classic()
users_comments_join %>%
ggplot()+
geom_boxplot(aes(x=year, y = TotalComments))+
theme_classic()
users_comments_join %>%
ggplot(aes(x=year, y = TotalComments))+
geom_boxplot()+
theme_classic()
users_comments_join %>%
ggplot(aes(x=year, y = TotalComments))+
geom_point()+
theme_classic()
library(ggplot2)
users_comments_join %>%
ggplot(aes(x = TotalComments)) +
geom_density() +
facet_wrap(~year, scales = "free") +
theme_classic()
users_posts_join <- users%>%
left_join(posts, by= "DisplayName" )
library(readr)
users <- read_csv("users.csv")
posts <- read_csv("posts.csv")
comments <- read_csv("comments.csv")
users_posts_join <- users%>%
left_join(posts, by= "DisplayName" )
users_posts_join <- users_posts_join %>%
mutate(
year = year(CreationDate),
month = month(CreationDate),
day = day(CreationDate),
day_of_week = wday(CreationDate, label = TRUE),
minute = minute(CreationDate),
second = second(CreationDate)
)
users_posts_join <- na.omit(users_posts_join)
users_posts_join %>%
ggplot(aes(x = TotalUpvotes)) +
geom_point() +
facet_wrap(~year, scales = "free") +
theme_classic()
users_posts_join %>%
ggplot(aes(x = TotalUpvotes, y = year)) +
geom_point() +
facet_wrap(~day_of_week, scales = "free") +
theme_classic()
users_posts_join %>%
ggplot(aes(x = TotalUpvotes, y = year)) +
geom_boplot() +
theme_classic()
users_posts_join %>%
ggplot(aes(x = TotalUpvotes, y = year)) +
geom_boxplot() +
theme_classic()
users_posts_join %>%
ggplot(aes(x = year, y = TotalUpvotes)) +
geom_boxplot() +
theme_classic()
users_posts_join %>%
ggplot(aes(x = year, y = TotalUpvotes)) +
facet_wrap(~ year, scales = "free") +
geom_boxplot() +
theme_classic()
users_posts_join %>%
ggplot(aes(x = month, y = TotalUpvotes)) +
facet_wrap(~ year, scales = "free") +
geom_boxplot() +
theme_classic()
users_posts_join %>%
ggplot(aes(x = TotalUpvotes)) +
facet_wrap(~ year, scales = "free") +
geom_density() +
theme_classic()
users_posts_join %>%
ggplot(aes(x = TotalPosts)) +
facet_wrap(~ year, scales = "free") +
geom_density() +
theme_classic()
library(tidyverse)
library(naniar)
tibble(count = c(NA, 10, 34, 17, NA, 20))
tibble(count = c(NA, 10, 0, 17, NA, 0))
sqrt(-1)
log(-1)
is.na(sqrt(-1))
is.nan(sqrt(-1))
is.nan(NA)
log(0)
-log(0)
c(1, 5, NULL)
c(1, 5, NA)
is.null(NULL)
is.null(NA)
x <- "NA"
is.na(x)
x=="NA"
data(airquality)
vis_miss(airquality)
gg_miss_var(airquality)
miss_var_summary(airquality)
miss_case_summary(airquality)
ggplot(airquality, aes(x = is.na(Ozone), y = Solar.R)) +
geom_boxplot()
ggplot(airquality, aes(x = Solar.R, color = is.na(Ozone))) +
geom_density()
ggplot(airquality, aes(x = Solar.R, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = Solar.R, y = 175))
ggplot(airquality, aes(x = Solar.R, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = 250+Solar.R/2, y = 175))
View(airquality)
ggplot(airquality, aes(x = Dat, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = Day, y = 175))
ggplot(airquality, aes(x = Day, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = Day, y = 175))
ggplot(airquality, aes(x = Temp, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = Temp, y = 175))
ggplot(airquality, aes(x = Month, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = DataFrameCallbacy, y = 175))
ggplot(airquality, aes(x = Month, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = Day, y = 175))
ggplot(airquality, aes(x = Day, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = Month, y = 175))
ggplot(airquality, aes(x = Day, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = Day, y = 175))
ggplot(airquality, aes(x = Day, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = Day, y = 175))
ggplot(airquality, aes(x = Day, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = Day, y = 175))+
facet_wrap(~Month, scales = "free")
ggplot(airquality, aes(x = Day, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = Day, y = 175))
ggplot(airquality, aes(x = Day, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = Day, y = 175))+
theme_classic()+
facet_wrap(~Month, scales = "free")
ggplot(airquality, aes(x = Temp, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = Temp, y = 175))+
theme_classic()+
facet_wrap(~Day, scales = "free")
ggplot(airquality, aes(x = Temp, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = Temp, y = 175))+
theme_classic()+
facet_wrap(~Day, scales = "free")
ggplot(airquality, aes(x = Wind, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = Wind, y = 175))+
theme_classic()+
facet_wrap(~Day, scales = "free")
ggplot(airquality, aes(x = Wind, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = Wind, y = 175))+
theme_classic()+
facet_wrap(~Day, scales = "free")
ggplot(airquality, aes(x = Temp, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = Temp, y = 175))+
theme_classic()+
facet_wrap(~Day, scales = "free")
ggplot(airquality, aes(x = Day, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = Day, y = 175))
ggplot(airquality, aes(x = Day, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = Day, y = 175))+
theme_classic()+
facet_wrap(~Month, scales = "free")
ggplot(airquality, aes(x = Temp, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = Temp, y = 175))
ggplot(airquality, aes(x = Temp, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = 70+ Temp/2, y = 175))
ggplot(airquality, aes(x = Temp, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = 60+ Temp/2, y = 175))
ggplot(airquality, aes(x = Wind, y = Ozone, color = is.na(Ozone))) +
geom_point() +
geom_smooth() +
geom_point(data = airquality %>% filter(is.na(Ozone)), mapping = aes(x = 5 +Wind/2, y = 175))+
theme_classic()+
facet_wrap(~Day, scales = "free")
library(nytimes)
library(jsonlite)
library(dplyr)
library(urltools)
# Define your API key and base URL
times_key <- "sMk7kLbWckmiYYVDOf0lMYD2jSAIWANV"
url <- "http://api.nytimes.com/svc/search/v2/articlesearch.json"
common_url <- param_set(url, "fq", url_encode("section_name:(\"Education\")"))
common_url <- param_set(url, "q", url_encode("Minnesota Teachers"))
common_url <- param_set(url, "api-key", url_encode(times_key))
# Initialize an empty data frame to store the documents
teachers_conditions <- data.frame()
for(i in 1:20){
url <- param_set(common_url, "page", i)
# Make the API request
Sys.sleep(12)  # Pause for 1 second
res <- fromJSON(url)
# Extract the documents from the response
docs <- res$response$docs
# Append the documents to the data frame
teachers_conditions <- bind_rows(teachers_conditions, docs)
}
View(teachers_conditions)
library(shiny); runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
library(nytimes)
library(jsonlite)
library(dplyr)
library(urltools)
# Define your API key and base URL
times_key <- "sMk7kLbWckmiYYVDOf0lMYD2jSAIWANV"
url <- "http://api.nytimes.com/svc/search/v2/articlesearch.json"
common_url <- param_set(url, "fq", url_encode("section_name:(\"Education\")"))
common_url <- param_set(url, "q", url_encode("Minnesota Teachers"))
common_url <- param_set(url, "api-key", url_encode(times_key))
# Initialize an empty data frame to store the documents
teachers_conditions <- data.frame()
for(i in 1:22){
url <- param_set(common_url, "page", i)
# Make the API request
Sys.sleep(12)  # Pause for 1 second
res <- fromJSON(url)
# Extract the documents from the response
docs <- res$response$docs
# Append the documents to the data frame
teachers_conditions <- bind_rows(teachers_conditions, docs)
}
View(teachers_conditions)
write.csv(teachers_conditions, "nytData.csv", row.names = FALSE)
write.table(teachers_conditions, "nytData.csv", sep = ",", col.names = TRUE, row.names = FALSE)
write.table(teachers_conditions, "nytData.csv", sep = ",", col.names = TRUE, row.names = FALSE)
dim(teachers_conditions)
colnames(teachers_conditions)
any(is.null(teachers_conditions))
any(is.na(teachers_conditions))
View(teachers_conditions)
write.csv(teachers_conditions, "nytData.csv", na = "", row.names = FALSE)
View(teachers_conditions)
View(teachers_conditions)
rownames(teachers_conditions) <- NULL
any(is.null(teachers_conditions))
colnames(teachers_conditions)
write.csv(teachers_conditions, "nytData.csv", na = "", row.names = FALSE)
# Install and load the data.table package (if not already installed)
if (!requireNamespace("data.table", quietly = TRUE)) {
install.packages("data.table")
}
library(data.table)
# Write the data to a CSV file using fwrite
fwrite(teachers_conditions, "nytData.csv", na = "")
library(data.table)
fwrite(teachers_conditions, "nytData.csv", na = "")
sapply(teachers_conditions, function(x) length(x))
View(teachers_conditions)
print(teachers_conditions[, 7])
print(teachers_conditions[, 220])
print(teachers_conditions[, 7])
print(teachers_conditions[, 7])
fwrite(teachers_conditions, "nytData.csv", na = "")
fwrite(teachers_conditions, "nytData.csv", na = "")
ggplot(airquality, aes(fill=factor(Month),x=is.na(Ozone)))+
geom_bar(position="fill")
impute_linmod <- function(data,function){
impute_linmod <- function(data,formular){
mod <- lm(formula,data=data)
pred <- predict(mod, newdata=data)
formula_chr <- as.character(formula)
response_var<-formula_chr[2]
var_with_nas <-data[[respose_var]]
imputed_var <- if_else(is.na(var_with_nas),pred, var_with_nas)
data[[respose_var]]<-imputed_var
data
}
impute_linmod(data=airquality,formular=Ozone~Wind+Temp)
impute_linmod(data=airquality,formula=Ozone~Wind+Temp)
impute_linmod <- function(data,formula){
mod <- lm(formula,data=data)
pred <- predict(mod, newdata=data)
formula_chr <- as.character(formula) #extract ozone as reponse variable
response_var<-formula_chr[2] ## extract ozone as reponse vairable
var_with_nas <-data[[respose_var]] ##directly obtain that var
imputed_var <- if_else(is.na(var_with_nas),pred, var_with_nas)
data[[respose_var]]<-imputed_var
data
}
impute_linmod(data=airquality,formula=Ozone~Wind+Temp)
impute_linmod(data=airquality,formula=Ozone~ Wind+Temp )
library(readr)
users <- read_csv("users.csv")
posts <- read_csv("posts.csv")
comments <- read_csv("comments.csv")
users_posts_join <- users%>%
left_join(posts, by= "DisplayName" )
users_posts_join <- users_posts_join %>%
mutate(
year = year(CreationDate),
month = month(CreationDate),
day = day(CreationDate),
day_of_week = wday(CreationDate, label = TRUE),
minute = minute(CreationDate),
second = second(CreationDate)
)
library(readr)
users <- read_csv("users.csv")
posts <- read_csv("posts.csv")
comments <- read_csv("comments.csv")
users_posts_join <- users%>%
left_join(posts, by= "DisplayName" )
users_posts_join <- users_posts_join %>%
mutate(
year = year(CreationDate),
month = month(CreationDate),
day = day(CreationDate),
minute = minute(CreationDate),
second = second(CreationDate)
)
users_posts_join <- na.omit(users_posts_join)
library(readr)
users <- read_csv("users.csv")
posts <- read_csv("posts.csv")
comments <- read_csv("comments.csv")
users_posts_join <- users%>%
left_join(posts, by= "DisplayName" )
users_posts_join <- users_posts_join %>%
mutate(
year = year(CreationDate),
month = month(CreationDate),
day = day(CreationDate),
minute = minute(CreationDate),
second = second(CreationDate)
)
users_posts_join <- na.omit(users_posts_join)
setwd("~/Documents/Sophmore Year/DS/aseveria.github.io/Projects/Water_Potability_Stat155Project")
setwd("~/Documents/Sophmore Year/DS/aseveria.github.io")
