geom_col(fill="tomato2")
ggplotly(p3)
})
}
shinyApp(ui, server)
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
install.packages("duckdb")
install.packages("DBI")
install.packages("DBI")
library(tidyverse)
library(DBI)
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb())
library(tidyverse)
library(DBI)
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb())
class(con)
# This takes 1-2 minutes
dbplyr::copy_nycflights13(con)
flights <- tbl(con, "flights")
planes <- tbl(con, "planes")
View(con)
View(flights)
View(planes)
flights %>%
show_query()
flights %>%
mutate(full_date = str_c(year, month, day, sep = "-")) %>%
show_query()
flights %>%
filter(dest == "IAH") %>%
arrange(dep_delay) %>%
show_query()
flights %>%
filter(dest == "IAH") %>%
arrange(dep_delay) %>%
head(n = 10) %>%
show_query()
flights %>%
filter(dest == "IAH" & origin == "JFK") %>%
arrange(dep_delay) %>%
show_query()
flights %>%
filter(dest == "IAH" | origin == "JFK") %>%
arrange(year, month, day, desc(dep_delay)) %>%
show_query()
class(flights)
dim(flights)
flights %>%
show_query()
flights %>%
mutate(full_date = str_c(year, month, day, sep = "-")) %>%
show_query()
flights %>%
filter(dest %in% c("IAH", "HOU")) %>%
show_query()
flights %>%
filter(!is.na(dep_delay)) %>%
show_query()
flights %>%
group_by(dest) %>%
summarize(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
show_query()
flights %>%
group_by(origin, dest) %>%
summarize(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
show_query()
planes %>%
select(tailnum, type, manufacturer, model, year) %>%
show_query()
planes %>%
select(tailnum, type, manufacturer, model, year) %>%
rename(year_built = year) %>%
show_query()
planes %>%
select(tailnum, type, manufacturer, model, year) %>%
relocate(manufacturer, model, .before = type) %>%
show_query()
flights %>%
mutate(
speed = distance / (air_time / 60)
) %>%
show_query()
flights %>%
left_join(planes, by = "tailnum") %>%
show_query()
runApp('~/Documents/Sophmore Year/DS/Interactive_Viz/neighborhood_diversity')
runApp('~/Documents/Sophmore Year/DS/Interactive_Viz/neighborhood_diversity/app3.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
knitr::opts_chunk$set(echo = TRUE)
library("readxl")
library(tidyverse)
library(ggplot2)
library(gplots)
library(sf)
library(plotly)
library(USAboundaries)
mn_cities <- sf::read_sf("../Data/shp_loc_pop_centers") #shp file/folder
mn_counties <- us_counties(resolution = "high", states = "Minnesota")
names_counties <- names(mn_counties)
names(mn_counties)[names_counties == 'state_name'] <- c("state_name1", "state_name2")
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
options(save.history=TRUE)
library(tidycensus)
library(dplyr)
library(stringr)
race_variables <- c(
"B02001_002",  # White alone
"B02001_003",  # Black or African American alone
"B02001_004",  # American Indian and Alaska Native alone
"B02001_005",  # Asian alone
"B03002_012"  # Hispanic or Latino
)
race_data_county <- get_acs(
year = 2020,
state = "MN",
geography = "county",
variables = race_variables,
output = 'wide',
geometry = TRUE
) %>%
rename(
"White" = "B02001_002E",
"Black" = "B02001_003E",
"Native" = "B02001_004E",
"Asian" = "B02001_005E",
"Latino" = "B03002_012E"
) %>%
select(-contains("_"))
knitr::opts_chunk$set(echo = TRUE)
library("readxl")
library(tidyverse)
library(ggplot2)
library(gplots)
library(sf)
library(plotly)
library(USAboundaries)
minnesota_schools_per_county <- st_join(minnesota_public_schools, mn_counties, left = FALSE)
ggplot() +
geom_sf(data = mn_counties, fill = "white", color = "black") +
geom_sf(data = minnesota_public_schools, color = "blue") +
coord_sf(crs = st_crs(mn_counties), xlim = c(-97, -89), ylim = c(43.5, 49.5)) +
theme_map() +
labs(title = "Minnesota Public Schools")
knitr::opts_chunk$set(echo = TRUE)
library("readxl")
library(tidyverse)
library(ggplot2)
library(gplots)
library(sf)
library(plotly)
library(USAboundaries)
mn_cities <- sf::read_sf("../Data/shp_loc_pop_centers") #shp file/folder
mn_counties <- us_counties(resolution = "high", states = "Minnesota")
names_counties <- names(mn_counties)
names(mn_counties)[names_counties == 'state_name'] <- c("state_name1", "state_name2")
pSchools <- read_xlsx("PublicSchool.xlsx",range=cell_cols("C:Y"))
states_map <- map_data("state")
minnesota_public_schools <- pSchools %>%
filter(SCHOOLYEAR == "2021-2022", STATE == "MN") %>% #This filters the data to what we want
mutate(state_name = tolower(abbr2state(`STATE`))) %>% #abreviarted
st_as_sf(coords = c("LON", "LAT"), crs = 4326) %>% #changes from a df to sf(spatial  feature)
st_transform(crs = st_crs(mn_counties)) #changing crs
ggplot() +
geom_sf(data = mn_counties, fill = "white", color = "black") +
geom_sf(data = minnesota_public_schools, color = "blue") +
coord_sf(crs = st_crs(mn_counties), xlim = c(-97, -89), ylim = c(43.5, 49.5)) +
theme_map() +
labs(title = "Minnesota Public Schools")
minnesota_schools_per_county <- st_join(minnesota_public_schools, mn_counties, left = FALSE)
minnesota_schools_per_county <- minnesota_schools_per_county%>%
count(name)
options(save.history=TRUE)
library(tidycensus)
library(dplyr)
library(stringr)
race_variables <- c(
"B02001_002",  # White alone
"B02001_003",  # Black or African American alone
"B02001_004",  # American Indian and Alaska Native alone
"B02001_005",  # Asian alone
"B03002_012"  # Hispanic or Latino
)
race_data_county <- get_acs(
year = 2020,
state = "MN",
geography = "county",
variables = race_variables,
output = 'wide',
geometry = TRUE
) %>%
rename(
"White" = "B02001_002E",
"Black" = "B02001_003E",
"Native" = "B02001_004E",
"Asian" = "B02001_005E",
"Latino" = "B03002_012E"
) %>%
select(-contains("_"))
library(plotly)
p<-ggplot() +
geom_sf(data = mn_counties, mapping = aes(fill = minnesota_schools_per_county$n)) +
scale_fill_gradientn(
colours = c("tomato4", "tomato3","tomato1" ,"orange3","orange1",  "lightsalmon4", "lightsalmon3", "lightsalmon1","black"),
limits = c(0, max(minnesota_schools_per_county$n))
) +
theme_map() +
theme(legend.position = "bottom") +
labs(fill = "Number of Schools")
ggplotly(p)
options(save.history=TRUE)
library(tidycensus)
library(dplyr)
library(stringr)
race_variables <- c(
"B02001_002",  # White alone
"B02001_003",  # Black or African American alone
"B02001_004",  # American Indian and Alaska Native alone
"B02001_005",  # Asian alone
"B03002_012"  # Hispanic or Latino
)
race_data_county <- get_acs(
year = 2020,
state = "MN",
geography = "county",
variables = race_variables,
output = 'wide',
geometry = TRUE
) %>%
rename(
"White" = "B02001_002E",
"Black" = "B02001_003E",
"Native" = "B02001_004E",
"Asian" = "B02001_005E",
"Latino" = "B03002_012E"
) %>%
select(-contains("_"))
race_per_county <- race_data_county %>%
pivot_longer(cols = c(`White`, `Black`, `Native`, `Asian`, `Latino`), names_to = "race", values_to = "total")
population_variable <- "B01003_001"
population_data_county <- get_acs(
year = 2020,
state = "MN",
geography = "county",
variables = population_variable,
output = 'wide',
geometry = TRUE
) %>%
rename(
"Total_Population" = "B01003_001E"
)
result<-result%>%
mutate(school_per_population = Total_Population/School_Count)
knitr::opts_chunk$set(echo = TRUE)
library("readxl")
library(tidyverse)
library(ggplot2)
library(gplots)
library(maps) # for map data  #install.packages('maps')
library(ggmap) # for mapping points on maps  #install.packages('ggmap')
library(RColorBrewer) # for color palettes #install.packages('RColorBrewer')
library(leaflet) # for highly customizable mapping  #install.packages('leaflet')
library(ggthemes) # for more themes (including theme_map())  #install.packages('ggthemes')
library(usdata) #install.packages('usdata')
library("viridis")           # Load
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
result<-result%>%
mutate(school_per_population = Total_Population/School_Count)
result <- st_join(population_data_county, school_count_by_county)
library(dplyr)
st_crs(population_data_county) <- st_crs(school_count_by_county)
population_variable <- "B01003_001"
population_data_county <- get_acs(
year = 2020,
state = "MN",
geography = "county",
variables = population_variable,
output = 'wide',
geometry = TRUE
) %>%
rename(
"Total_Population" = "B01003_001E"
)
# Select only the total population count and county geometry
population_data_county <- population_data_county %>%
select(GEOID, NAME, Total_Population, geometry)
# Print the first few rows of the data
head(population_data_county)
library(tidyverse)
library(ggplot2)
library(gplots)
library(sf)
library(plotly)
library(USAboundaries)
##County data
mn_cities <- sf::read_sf("../Data/shp_loc_pop_centers") #shp file/folder
mn_counties <- us_counties(resolution = "high", states = "Minnesota")
names_counties <- names(mn_counties)
names(mn_counties)[names_counties == 'state_name'] <- c("state_name1", "state_name2")
MN_SCHOOL_PROGRAMS<-read_csv("school_program_locations.csv")
states_map <- map_data("state")
MN_SCHOOL_PROGRAMS <- MN_SCHOOL_PROGRAMS %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>% #changes from a df to sf(spatial  feature)
st_transform(crs = st_crs(mn_counties)) #changing crs
school_count_by_county <- MN_SCHOOL_PROGRAMS %>%
group_by(COUNTYNAME) %>%
summarize(School_Count = n())
library(dplyr)
st_crs(population_data_county) <- st_crs(school_count_by_county)
result <- st_join(population_data_county, school_count_by_county)
result<-result%>%
mutate(school_per_population = Total_Population/School_Count)
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
race_per_county <- race_data_county %>%
pivot_longer(cols = c(`White`, `Black`, `Native`, `Asian`, `Latino`), names_to = "race", values_to = "total")
options(save.history=TRUE)
library(tidycensus)
library(dplyr)
library(stringr)
race_variables <- c(
"B02001_002",  # White alone
"B02001_003",  # Black or African American alone
"B02001_004",  # American Indian and Alaska Native alone
"B02001_005",  # Asian alone
"B03002_012"  # Hispanic or Latino
)
race_data_county <- get_acs(
year = 2020,
state = "MN",
geography = "county",
variables = race_variables,
output = 'wide',
geometry = TRUE
) %>%
rename(
"White" = "B02001_002E",
"Black" = "B02001_003E",
"Native" = "B02001_004E",
"Asian" = "B02001_005E",
"Latino" = "B03002_012E"
) %>%
select(-contains("_"))
race_per_county <- race_data_county %>%
pivot_longer(cols = c(`White`, `Black`, `Native`, `Asian`, `Latino`), names_to = "race", values_to = "total")
race_per_county$NAME <- sub(" County, Minnesota", "", race_per_county$NAME)
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
View(mn_counties)
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
View(race_per_county)
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
print(county_data)  # Debugging: Print the filtered county data
library(shiny)
library(leaflet)
library(plotly)
ui <- fluidPage(
titlePanel("Interactive County Map and Bar Graph"),
sidebarLayout(
sidebarPanel(
# Add any additional widgets you want in the sidebar here
),
mainPanel(
leafletOutput("countyMap"),
plotlyOutput("barPlot")
)
)
)
server <- function(input, output) {
output$countyMap <- renderLeaflet({
leaflet() %>%
addPolygons(
data = mn_counties,
fill = TRUE,
fillColor = ~colorQuantile("YlOrRd", result$school_per_population)(result$school_per_population),
weight = 2,
opacity = 1,
color = "white",
fillOpacity = 0.7,
layerId = ~name,
popup = ~name
) %>%
addLegend(pal = colorQuantile("YlOrRd", result$school_per_population),
values = result$school_per_population,
title = "# of Schools by Population")
})
output$barPlot <- renderPlotly({
req(input$countyMap_click$id)
county_name <- input$countyMap_click$id
print(county_name)  # Debugging: Print the county_name to the R console
library(shiny)
library(leaflet)
library(plotly)
ui <- fluidPage(
titlePanel("Interactive County Map and Bar Graph"),
sidebarLayout(
sidebarPanel(
# Add any additional widgets you want in the sidebar here
),
mainPanel(
leafletOutput("countyMap"),
plotlyOutput("barPlot")
)
)
)
server <- function(input, output) {
output$countyMap <- renderLeaflet({
leaflet() %>%
addPolygons(
data = mn_counties,
fill = TRUE,
fillColor = ~colorQuantile("YlOrRd", result$school_per_population)(result$school_per_population),
weight = 2,
opacity = 1,
color = "white",
fillOpacity = 0.7,
layerId = ~name,
popup = ~name
) %>%
addLegend(pal = colorQuantile("YlOrRd", result$school_per_population),
values = result$school_per_population,
title = "# of Schools by Population")
})
output$barPlot <- renderPlotly({
req(input$countyMap_click$id)
county_name <- input$countyMap_click$id
print(county_name)  # Debugging: Print the county_name to the R console
county_data <- race_per_county %>%
filter(NAME == county_name)
print(county_data)  # Debugging: Print the filtered county data
library(shiny)
library(leaflet)
library(plotly)
ui <- fluidPage(
titlePanel("Interactive County Map and Bar Graph"),
sidebarLayout(
sidebarPanel(
# Add any additional widgets you want in the sidebar here
),
mainPanel(
leafletOutput("countyMap"),
plotlyOutput("barPlot")
)
)
)
server <- function(input, output) {
output$countyMap <- renderLeaflet({
leaflet() %>%
addPolygons(
data = mn_counties,
fill = TRUE,
fillColor = ~colorQuantile("YlOrRd", result$school_per_population)(result$school_per_population),
weight = 2,
opacity = 1,
color = "white",
fillOpacity = 0.7,
layerId = ~name,
popup = ~name
) %>%
addLegend(pal = colorQuantile("YlOrRd", result$school_per_population),
values = result$school_per_population,
title = "# of Schools by Population")
})
output$barPlot <- renderPlotly({
req(input$countyMap_click$id)
county_name <- input$countyMap_click$id
print(county_name)  # Debugging: Print the county_name to the R console
county_data <- race_per_county %>%
filter(NAME == county_name)
print(county_data)  # Debugging: Print the filtered county data
p <- ggplot(data = county_data, aes(x = race, y = total)) +
geom_bar(stat = "identity") +
theme_minimal()
plotly::ggplotly(p)
})
}
shinyApp(ui, server)
View(ui)
View(ui)
View(ui)
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
runApp('~/Documents/Sophmore Year/DS/Final Project/work/R-File/Code/improoved.R')
~/Desktop/temp_website/docs/
cd path
install.packages('quarto')
quarto_render()
quarto_render()
library(quarto)
quarto_render
cd /path/to/your/quarto/project
getwd()
cd/Users/aliciaseveriano/Documents/Sophmore Year/DS/aseveria.github.io
cdUsers/aliciaseveriano/Documents/Sophmore Year/DS/aseveria.github.io
cd "/Users/aliciaseveriano/Documents/Sophmore Year/DS/aseveria.github.io"
cd "/Users/aliciaseveriano/Documents/Sophmore Year/DS/aseveria.github.io"
cd /Users/aliciaseveriano/Documents/Sophmore\ Year/DS/aseveria.github.io
cd '/Users/aliciaseveriano/Documents/Sophmore Year/DS/aseveria.github.io'
cd "/Users/aliciaseveriano/Documents/Sophmore Year/DS/aseveria.github.io"
cd "/Users/aliciaseveriano/Documents/Sophmore\ Year/DS/aseveria.github.io"
